{{
func __domain_getentity(name)
# usage: domain.getentity(name)
# description: get a named entity from the domain model
# example: |-
# domain.getentity("User")
    #"Calling domain.getentity(";name;")\n"
    $doment = model.entities |
        array.filter @(do(p); ret p.name == name; end) |
        array.first  |
        utils.objectclone
    if !$doment
        "Unable to find entity [";name;"]\n"
        ret
    end
    __domain_setEntityIsObject($doment)
    ret $doment
end


func __domain_getinterface(name)
# description: get a named interface from the domain model
# usage: domain.getinterface(name)
# params: name - interface name, can also pass optional 
#   position after name seperated by semi colon where position 0 indicates add 
#   interface items BEFORE entity proprties and 1 add them after 
# example: |-
# domain.getinterface("IAudit")
# domain.getinterface("IUser:0")
# https://github.com/scriban/scriban/issues/386
    # "Calling domain.getinterface(";name;")\n"
    $aname = name | string.split ":"
    if $aname.size > 1
       name = $aname[0] 
    end
    $iface = model.interfaces |
            array.filter @(do(p); ret p.name == name; end) |
            array.first |
            utils.objectclone
    if !$iface
        # "domain.getinterface(";name;"). Interface not found\n"
        ret
    end
    if $aname.size > 1
        $iface.position = $aname[1]
        if $aname.size > 2
          $iface.useKey = $aname[2]
        end
    end
    __domain_setEntityIsObject($iface)
    ret $iface
end


func __domain_getinterfacescsv(entity)
# description: get a list of interfaces for an entity as a csv list
# usage: domain.getinterfacescsv(entity)
# params: entity - entity instance 
# example: |-
# e = domain.getinterface("IAudit")
# ilist = domain.getinterfacescsv(e)
    $list = ""
    $name = ""
    for i in entity?.interfaces
        $name = i
        $aname = i | string.split ":"
        if $aname.size > 1
            $name = $aname[0] 
        end
        $list = $list + $name + ", " 
    end
    if $list != ''
        $list = string.remove_last $list ","
        $list = ": "+$list
    end
    ret $list
end


func __domain_getinterfacepropertiesbyname(name)
# usage: domain.getinterfacepropertiesbyname(name)
# description: get all interface properties for an named interface
# example: |-
# domain.getinterfacepropertiesbyname("IAudit")
    # "Calling domain.getinterfacepropertiesbyname(";name;")\n"
    $item = __domain_getinterface(name)
    ret __domain_getinterfaceproperties($item)
end


func __domain_getinterfaceproperties(item)
# usage: domain.getinterfaceproperties(item)
# description: get all interface properties for an entity
# example: |-
# domain.getinterfaceproperties("IAudit")
    # "Calling domain.getinterfaceproperties(";item;")\n"
    $props = [] 
    for $p in item?.properties
        __domain_setIsObject($p)
        if $p.isObject
            $props = array.add_range $props __domain_getinterfacepropertiesbyname($p.type)
        else
            $props = array.add $props $p 
        end
    end
    ret $props;
end
    

func __domain_getkeys(name)
# usage: domain.getkeys(name,prefix)
# description: get all key properties for an entity by name name, 
# using an optional {key} replacement prefix,
# if type is an object type then {key} will be the key field from the object type
# example: |-
# domain.getkeys("User")
    # "Calling domain.getkeys(";name;")\n"
    $iface = __domain_getinterface(name)
    if $iface
        ret __domain_getentitykeys($iface)   
    else
        $entity = __domain_getentity(name)
        ret __domain_getentitykeys($entity)
    end
end


func __domain_getentitykeys(entity)
# usage: domain.getentitykeys(entity)
# description: get all key properties for an given entity 
# example: |-
# e = domain.getentitykeys("User")
    # "Calling domain.getentitykeys(";entity;")\n"
    $keys = []
    if entity
        $keys = entity.properties |
            array.filter @(do(p); ret p.isKey == true; end) |
            utils.objectclone
    end
    ret $keys ?? []
end


func __domain_getchildkeys(type, prefix = null)
# usage: domain.getchildkeys(type,prefix)
# description: get all key properties for a given child property type
# with an optional prefix (eg. When linking to the same interface/type more than once then you require a unique name)
# eg domain.getchildkeys("IUser", "Primary{key}") would map IUser to property named PrimaryUserId
# keys = domain.getchildkeys("User")
    # "Calling domain.getchildkeys(";type;",";prefix;")\n"
    $keys = __domain_getkeys(type)
    # "domain.getchildkeys()";$keys;"\n"
    
    # Mark all the child keys as not an identity as they are link fields eg. foreign keys
    for $k in $keys
        if prefix
            $k.name = string.replace prefix "{key}" $k.name
        end
        $k.isIdentity = false;
        $k.isKey = false;
    end
    ret $keys
end


func __domain_getkeynames(entity)
# usage: domain.getkeyname(entity)
# description: get all key names for an entity 
# example: |-
# e = domain.getentity("User")
# keys = domain.getkeynames(e)
# outputs UserId
    $keys = __domain_getentitykeys(entity)
    ret $keys | array.map "name" 
end

func __domain_getproperty(properties, name)
    # "Calling domain.getchilgetproperty(";properties;",";name;")\n"
    $prop = properties | 
           array.filter @(do(p); ret p.name == name; end) |
           array.first
    ret $prop
end      

func __domain_setEntityIsObject(entity)
    entity.properties = array.each entity.properties @__domain_setIsObject
end

func __domain_setIsObject(property)
# usage: domain.setSimpleType(property)
# description: Set a simple type based on yaml model type
# eg. provide a method to determine if the type is a simple type, sttring, number, date etc or a child object type
# example: 1-
# db.sqltype({type: "int32", isIdentity: true})
# INT IDENTITY (1,1) NOT NULL
    if ! property
        ret
    end
    $types = [
        "int", "int32", 
        "string",
        "decimal","numeric","float",
        "bool","boolean","bit",
        "date","datetime",
        "long","int64",
        "short","int16",
        "byte",
        "binary"
    ]
    property.isObject = !array.contains($types, property.type)
    ret property
end
    

textrude.create_library this "domain"
}}