{{
include "database.sbn"

func __domain_getinterface(name)
# usage: domain.getinterface(name)
# description: get a named interface from the domain model
# example: |-
# domain.getinterface("IAudit")
# https://github.com/scriban/scriban/issues/386
    iface = model.interfaces |
            array.filter @(do(p); ret p.name == name; end) |
            array.first |
            utils.objectclone
    ret iface
end


func __domain_getentity(name)
# usage: domain.getentity(name)
# description: get a named entity from the domain model
# example: |-
# domain.getentity("User")
    doment = model.entities |
        array.filter @(do(p); ret p.name == name; end) |
        array.first |
        utils.objectclone
    if !doment
        ret
    end
    # set default sqltype for all properties
    for domep in doment?.properties
        domep.sqlType = db.sqlType(domep)
    end 
    # iterate over all interfaces used and get a cole of all their properties
    for ip in doment?.interfaces | array.each @__domain_getinterfaceproperties
        # for each interface property in the named interface
        # set the corresponding sql type and add to the cloned object
        for domip in ip
            # "\n Interface Property  :"+domip+" Sql type ="+db.sqlType(domip)+"\n"
            domip.sqlType = db.sqlType(domip)
            domip.isKey = false;
            doment.properties = doment.properties | array.add domip
        end
    end
    keys = __domain_getentitykeys(doment)
    # If no key specified default adding a new int identity column
    if !keys || keys.size == 0
        key = {name: name+"Id", type:"int", isIdentity: true}
        key.sqlType = db.sqlType(key)
        doment.properties = doment.properties | array.insert_at 0 key
    end
    
    ret doment
end


func __domain_getinterfaceproperties(name)
# usage: domain.getinterfaceproperties(name)
# description: get all interface properties for an entity
# example: |-
# domain.getinterfaceproperties("IAudit")
    item = __domain_getinterface(name)
    props = [] 
    for p in item?.properties
        # Using null to determine if this is an object type
        if db.sqlType(p) == null
            props = array.add_range props __domain_getchildkeys(p.type, p.name)
        else
            props = array.add props p 
        end
    end
    ret props;
end


func __domain_getkeys(name)
# usage: domain.getkeys(name,prefix)
# description: get all key properties for an entity by name name, 
# using an optional {key} replacement prefix,
# if type is an object type then {key} will be the key field from the object type
# example: |-
# domain.getkeys("User")
    iface = __domain_getinterface(name)
    keys = []
    # "getKeys("+name+")\n"
    if iface
        ret __domain_getentitykeys(iface)
        # "Interface Properties :"+props+"\n"        
    else
        entity = __domain_getentity(name)
        ret __domain_getentitykeys(entity)
    end
end


func __domain_getentitykeys(entity)
# usage: domain.getentitykeys(entity)
# description: get all key properties for an given entity 
# example: |-
# e = domain.getentity("User")
# domain.getentitykeys(e)
    keys = []
    if entity
        keys = entity.properties |
            array.filter @(do(p); ret p.isKey == true; end) |
            utils.objectclone
    end
    ret keys
end


func __domain_getchildkeys(name, prefix = null)
    # usage: domain.getchildkeys(name,prefix)
    # description: get all key properties for an given child entity 
    # with an optional prefix (normally primary key of child object type)
    # example: |-
    # keys = domain.getchildkeys("User")
    # domain.getentitykeys(e)
    keys = __domain_getkeys(name)
    # Mark all the child keys as not an identity as they are link fields eg. foriegn keys
    for k in keys
        if prefix
            k.name = string.replace prefix "{key}" k.name
        end
        k.isIdentity = false;
    end
    ret keys
end
textrude.create_library this "domain"
}}