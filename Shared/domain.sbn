{{
include "database.sbn"

func __domain_getinterface(name)
# usage: domain.getinterface(name)
# description: get a named interface from the domain model
# example: |-
# domain.getinterface("IAudit")
# https://github.com/scriban/scriban/issues/386
    "Calling domain.getinterface(";name;")\n"
    aname = name | string.split ":"
    if aname.size > 1
       name = aname[0] 
    end
    iface = model.interfaces |
            array.filter @(do(p); ret p.name == name; end) |
            array.first |
            utils.objectclone
    if aname.size > 1
        iface.position = aname[1]
    end
    "returning domain.getinterface(";iface;")\n"
    ret iface
end


func __domain_getentity(name)
# usage: domain.getentity(name)
# description: get a named entity from the domain model
# example: |-
# domain.getentity("User")
    "Calling domain.getentity(";name;")\n"
    doment = model.entities |
        array.filter @(do(p); ret p.name == name; end) |
        array.first |
        utils.objectclone
    if !doment
        "Unable to find entity [";name;"]\n"
        ret
    end
    # set default sqltype for all properties
    for domep in doment?.properties
        domep.sqlType = db.sqlType(domep)
    end 
    "Entity has the following interfaces";doment?.interfaces;"\n"
    # iterate over all interfaces used and get all their properties
    # iterating over direct interface not parsed!!
    for ip in doment?.interfaces | array.each @__domain_getinterfaceproperties
        "Adding interface properties ";ip;"-";doment.properties.size;"\n"
        ipos = ip?.position ?? 1
        # for each interface property in the named interface
        # set the corresponding sql type and add to the cloned object
        for domip in ip
            domip.sqlType = db.sqlType(domip)
            # if position = 0 then insert interface properties into the beginning of the property array
            # otherwise append them 
            if ipos == 0
                fidx = 0
            else
                fidx = doment.properties.size
            end
            "Adding interface property ";fidx;ip;"\n"
            doment.properties = doment.properties | array.insert_at fidx++ domip
        end
    end
    keys = __domain_getentitykeys(doment)
    # "Found the following keys ";keys;"\n"
    # "getentity(";name;") -> domain.getentitykeys()->";keys;keys.size;"\n"
    # If no key specified default adding a new int identity column
    if !keys || keys.size == 0
        key = {name: name+"Id", type:"int", isIdentity: true, isKey: true}
        key.sqlType = db.sqlType(key)
        doment.properties = doment.properties | array.insert_at 0 key
    end
    
    ret doment
end


func __domain_getinterfaceproperties(name)
# usage: domain.getinterfaceproperties(name)
# description: get all interface properties for an entity
# example: |-
# domain.getinterfaceproperties("IAudit")
    # "Calling domain.getinterfaceproperties(";name;")\n"
    item = __domain_getinterface(name)
    props = [] 
    for p in item?.properties
        # Interface property ";p.name;" ";p.type;"sqltype=";db.sqlType(p);"\n"
        # Using null sqlType to determine if this is an object type
        if db.sqlType(p) == null
            props = array.add_range props __domain_getchildkeys(p.type, p.name)
        else
            props = array.add props p 
        end
    end
    ret props;
end


func __domain_getkeys(name)
# usage: domain.getkeys(name,prefix)
# description: get all key properties for an entity by name name, 
# using an optional {key} replacement prefix,
# if type is an object type then {key} will be the key field from the object type
# example: |-
# domain.getkeys("User")
    # "Calling domain.getkeys(";name;")\n"
    iface = __domain_getinterface(name)
    keys = []
    if iface
        ret __domain_getentitykeys(iface)   
    else
        entity = __domain_getentity(name)
        ret __domain_getentitykeys(entity)
    end
end


func __domain_getentitykeys(entity)
# usage: domain.getentitykeys(entity)
# description: get all key properties for an given entity 
# example: |-
# e = domain.getentitykeys("User")
    # "Calling domain.getentitykeys(";entity;")\n"
    keys = []
    if entity
        keys = entity.properties |
            array.filter @(do(p); ret p.isKey == true; end) |
            utils.objectclone
    end
    # "getentitykeys" + keys
    ret keys
end


func __domain_getchildkeys(type, prefix = null)
# usage: domain.getchildkeys(type,prefix)
# description: get all key properties for a given child property type
# with an optional prefix (eg. When linking to the same interface/type more than once then you require a unique name)
# eg domain.getchildkeys("IUser", "Primary{key}") would map IUser to property named PrimaryUserId
# keys = domain.getchildkeys("User")
    # "Calling domain.getchildkeys(";type;",";prefix;")\n"
    keys = __domain_getkeys(name)
    # Mark all the child keys as not an identity as they are link fields eg. foreign keys
    for k in keys
        if prefix
            k.name = string.replace prefix "{key}" k.name
        end
        k.isIdentity = false;
        k.isKey = false;
    end
    ret keys
end


func __domain_getkeynames(entity)
# usage: domain.getkeyname(entity)
# description: get all key names for an entity 
# example: |-
# e = domani.getentity("User")
# keys = domain.getkeynames(e)
# outputs UserId
    keys = __domain_getentitykeys(entity)
    ret keys | array.map "name" 
end


func __domain_getschemanames(model)
# usage: domain.getschemanames(model)
# description: get all schema names used in the domain model 
# example: |-
# snames = domain.getschemanames(model)
# outputs UserId
    schemas = model.entities |
              array.filter @(do(p); ret p.schema != null; end) |
              array.map "schema" 
    ret schemas
end

textrude.create_library this "domain"
}}