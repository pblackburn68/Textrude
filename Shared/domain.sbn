{{
func __domain_getentity(name)
# usage: domain.getentity(name)
# description: get a named entity from the domain model
# example: |-
# domain.getentity("User")
    # "Calling domain.getentity(";name;")\n"
    $doment = model.entities |
        array.filter @(do(p); ret p.name == name; end) |
        array.first  |
        utils.objectclone

    if !$doment        
        utils.writeln("domain.getentity()\nError: Unable to find entity ["+name+"]")
        ret
    end

    # Add default key if not present
    $keys = $doment.properties |
            array.filter @(do(p); ret p.isKey == true; end) |
            utils.objectclone
    
    # No keys found in entity or any interface being implemented 
    # then add a default
    $addId = false

    if (!$keys || $keys.size == 0)
        $addId = true
        for $iname in $doment.interfaces
            # Get the interface
            $iface = domain.getinterface($iname)
            # if we are using the key from an interface then do not add our default key
            if $iface.useKey
                $addId = false
            end
        end
    end
    if ($addId)
        $keyName = name+"Id";
        $key = {name: $keyName, type:"int", isIdentity: true, isKey: true}
        $keys = array.add $keys $key
        $doment.properties = array.insert_at $doment.properties 0 $key
    end

    # Set objectproprty types flag isObject
    __domain_setEntityObjectProperties($doment)
    
    ret $doment
end


func __domain_getinterface(name)
# description: get a named interface from the domain model
# usage: domain.getinterface(name)
# params: name - interface name, can also pass optional 
#   position after name seperated by semi colon where position 0 indicates add 
#   interface items BEFORE entity proprties and 1 add them after 
# example: |-
# domain.getinterface("IAudit")
# domain.getinterface("IUser:0")
# https://github.com/scriban/scriban/issues/386
    # "domain.getinterface(";name;")\n"
    $aname = name | string.split ":"
    if $aname.size > 1
       name = $aname[0] 
    end
    $iface = model.interfaces |
        array.filter @(do(p); ret p.name == name; end) |
        array.first |
        utils.objectclone

    if !$iface
        # "domain.getinterface(";name;"). Interface not found\n"
        ret
    end
    if $aname.size > 1
        $iface.position = $aname[1]
        if $aname.size > 2
          $iface.useKey = $aname[2]
        end
    end
    # Set objectproprty types flag isObject
    __domain_setEntityObjectProperties($iface)

    # Get all object properties for the interface with a keyed name
    $ctypes = $iface.properties |
        array.filter @(do(p); ret p.isObject == true && string.contains(p.name, "{key}"); end) 
    
    # Set the keyed name for each object property
    for $ctype in $ctypes
        $keys = __domain_getkeys($ctype.type) | array.map "name"
        $keyname = $keys | array.join "_"
        # "domain.getinterface();domain.getkeys()";$keyname;"\n"
        $ctype.name = string.replace $ctype.name "{key}" $keyname
    end

    ret $iface

end


func __domain_getinterfacescsv(entity)
# description: get a list of interfaces for an entity as a csv list
# usage: domain.getinterfacescsv(entity)
# params: entity - entity instance 
# example: |-
# e = domain.getinterface("IAudit")
# ilist = domain.getinterfacescsv(e)
    $list = ""
    $name = ""
    for i in entity?.interfaces
        $name = i
        $aname = i | string.split ":"
        if $aname.size > 1
            $name = $aname[0] 
        end
        $list = $list + $name + ", " 
    end
    if $list != ''
        $list = string.remove_last $list ","
        $list = ": "+$list
    end
    ret $list
end


func __domain_getinterfacepropertiesbyname(name)
# usage: domain.getinterfacepropertiesbyname(name)
# description: get all interface properties for an named interface
# example: |-
# domain.getinterfacepropertiesbyname("IAudit")
    # "Calling domain.getinterfacepropertiesbyname(";name;")\n"
    $item = __domain_getinterface(name)
    ret __domain_getinterfaceproperties($item)
end


func __domain_getinterfaceproperties(entity)
# usage: domain.getinterfaceproperties(entity)
# description: get all interface properties for an entity
# example: |-
# domain.getinterfaceproperties("IAudit")
    # "Calling domain.getinterfaceproperties(";entity;")\n"
    $props = [] 
    for $p in entity?.properties
        __domain_setPropertyIsObject($p)
        if $p.isObject
            $props = array.add_range $props __domain_getinterfacepropertiesbyname($p.type)
        else
            $props = array.add $props $p 
        end
    end
    ret $props;
end
    

func __domain_getkeys(name)
# usage: domain.getkeys(name)
# description: get all key properties for an entity by name 
# example: |-
# domain.getkeys("User")
    # "Calling domain.getkeys(";name;")\n"
    $iface = __domain_getinterface(name)
    if $iface
        ret __domain_getentitykeys($iface)   
    else
        $entity = __domain_getentity(name)
        ret __domain_getentitykeys($entity)
    end
end


func __domain_getentitykeys(entity)
# usage: domain.getentitykeys(entity)
# description: get all key properties for a given entity 
# example: |-
# entity = domain.getentity("User")
# keys = domain.getentitykeys(entity)
    
    if !entity
        utils.writeln("domain.getentitykeys()\nError: null entity")
        ret
    end    
    if object.typeof(entity) != "object"
        utils.writeln("domain.getentitykeys()\nError: Passed parameter is not an object\n"+entity+"\n")
        ret
    end
    # utils.writeln "Calling domain.getentitykeys("+entity.name+")"
    $keys = []
    if entity
        $keys = entity.properties |
            array.filter @(do(p); ret p.isKey == true; end) |
            utils.objectclone
    end
    
    # "domain.getentitykeys()\n Keys: ";$keys;"\n"   
    for $iname in entity?.interfaces 
        $iface = domain.getinterface($iname)
        if ($iface?.useKey)
            # Get interface keys
            $ikeys = domain.getentitykeys($iface)
            # Get the names of the keys
            $knames = $keys | array.map "name"
            # Add the keys from the interface that are not already in the keys array
            for $ikey in $ikeys
                if !array.contains($knames,$ikey.name)
                    $keys = array.add $keys $ikey
                end
            end
            # $keys = array.concat $keys domain.getentitykeys($iface)
        end
    end
    
    ret $keys 

end


func __domain_getkeyscsv(name)
# usage: domain.getentitykeyscsv(entity)
# description: get all properties marked isKey as a comma separated list from a named entity
# children = domain.getentitykeyscsv("Address")
# returns csv list of keys
    $entity = __domain_getentity(name)
    ret __domain_getentitykeyscsv($entity)
end


func __domain_getentitykeyscsv(entity)
    # usage: domain.getentitykeyscsv(entity)
    # description: get all properties marked isKey as a comma separated list from a named entity
    # children = domain.getentitykeyscsv("Address")
    # returns csv list of keys
        $keys = __domain_getentitykeys(entity)
        if !$keys
            "domain.getentitykeyscsv()\nError: No keys found for [";entity.name;"]\n";entity;"\n"
        end
        # "domain.getentitykeyscsv()\n";entity;"\nEntity Keys : ";$keys;"\n"
        ret __domain_getentitykeys(entity) | array.map "name" | array.join "," 
    end
    

func __domain_getchildren(name)
# usage: domain.__domain_getchildren(name)
# description: get all properties that are themselves entities ie child objects/entites for a named entity
# children = domain.__domain_getentitychildren("Address")
# returns an object as follows { name: entity name, entity: entity }
    $entity = __domain_getentity(name)
    ret __domain_getentitychildren($entity) 
end


func __domain_getentitychildren(entity)
# usage: domain.__domain_getentitychildren(entity)
# description: get all properties that are themselves entities ie child objects/entites from a 
# previously loaded entity
# e = domain.getentitychildren("Address")
# children = domain.getentitychildren(e)
# returns an object as follows { name: entity name, entity: entity }
    # utils.writeln("Debug domain.getentitychildren("+entity+")")
    $children = []
    if entity
        for $p in entity?.properties
            if $p.isObject
                $children = array.add $children {name: $p.name, entity: domain.getentity($p.type)}
            end
        end
        
        for $i in entity?.interfaces
            $iface = domain.getinterface($i)
            for $p in $iface?.properties
                if $p.isObject
                    $children = array.add $children {name: $p.name, entity:domain.getinterface($p.type) }
                end
            end
        end
    end
    ret $children
end


func __domain_getchildkeys(type, prefix = null)
# usage: domain.getchildkeys(type,prefix)
# description: get all key properties for a given child property type
# with an optional prefix (eg. When linking to the same interface/type more than once then you require a unique name)
# eg domain.getchildkeys("IUser", "Primary{key}") would map IUser to property named PrimaryUserId
# keys = domain.getchildkeys("User")
    # "Calling domain.getchildkeys(";type;",";prefix;")\n"
    $keys = __domain_getkeys(type)
    # "domain.getchildkeys()";$keys;"\n"
    
    # Mark all the child keys as not an identity as they are associated entities 
    for $k in $keys
        if prefix
            $k.name = string.replace prefix "{key}" $k.name
        end
        $k.isIdentity = false;
        $k.isKey = false;
    end
    if !$keys
        $keyName = type+"Id";
        $key = {name: $keyName, type:"int", isIdentity: false, isKey: false}
        $key.sqlType =  mssql.sqlType($key);
        $keys = [$key]
    end
    ret $keys
end


func __domain_getkeynames(entity)
# usage: domain.getkeyname(entity)
# description: get all key names for an entity 
# example: |-
# e = domain.getentity("User")
# keys = domain.getkeynames(e)
# outputs UserId
    $keys = __domain_getentitykeys(entity)
    # "domain.getkeynames(";entity;")\n";$keys;"\n"  
    ret $keys | array.map "name" 
end


func __domain_getproperty(properties, name)
# usage: domain.getproperty(properties, name)
# description: get a named property from a properties array
# example: |-
# e = domain.getentity("User")
# fn = domain.getproperty(e.properties, "FirstName")
# fn. type
# outputs string
    # "Calling domain.getproperty(";properties;",";name;")\n"
    $prop = properties | 
           array.filter @(do(p); ret p.name == name; end) |
           array.first
    ret $prop
end      

func __domain_setEntityObjectProperties(entity)
    entity.properties = array.each entity.properties @__domain_setPropertyIsObject
end


func __domain_setPropertyIsObject(property)
# usage: domain.setPropertyIsObject(property)
# description: Set the isObject flag if the property type is not one of the simple yaml model types
# eg. provide a method to determine if the type is a child object type
# example: 1-
# domain.setPropertyIsObject({name: "User", type: "User"})
# 
    if ! property
        ret
    end
    $types = [
        "int", "int32", 
        "string",
        "decimal","numeric","float",
        "bool","boolean","bit",
        "date","datetime",
        "long","int64",
        "short","int16",
        "byte",
        "binary"
    ]
    property.isObject = !array.contains($types, property.type)
    ret property
end
    

textrude.create_library this "domain"
}}