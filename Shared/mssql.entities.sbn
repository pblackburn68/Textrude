USE {{model.name}}
SET QUOTED_IDENTIFIER, ARITHABORT, ANSI_NULLS, ANSI_WARNINGS ON
GO 
{{for s in mssql.getschemanames(model)}}
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '{{s}}')
BEGIN
   EXEC('CREATE SCHEMA [{{s}}] AUTHORIZATION [dbo]');
END{{~end}}      
GO
{{

sqlentities = mssql.getentities(model)
for e in sqlentities
    schema = e.schema ? e.schema : "dbo"  
}} 
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[{{schema}}].[{{e.name}}]') AND type IN (N'U'))
BEGIN 
    CREATE TABLE [{{schema}}].[{{e.name}}]
    (
    {{~ 
    for p in e?.properties~}} 
        [{{ p.name }}] {{p.sqlType}}{{ p.default ? " "+mssql.default(e.name,p) : "" }},     
    {{~end~}} 
        {{mssql.primarykey(e.name, domain.getkeynames(e))}}
    )   
END 
{{
end
for e in sqlentities
    children = mssql.getchildren(e.name)
        
    for c in children
        # "child ";c;"\n"
        keys = domain.getentitykeys(c.entity) 
        # If key can be used multiple times we set the useName flag to true
        # otherwise just use the primary key field name
        if keys?.size == 1
            if c.useName
                pkeys = c.name
            else
                pkeys = keys[0].name
            end 
        else
            pkeys = keys
        end
        mssql.foreignkey(e.schema+"."+e.name, c?.entity?.schema+"."+(c?.entity?.baseType ?? c.name), pkeys, keys);"\n"
        
    end

end
}}