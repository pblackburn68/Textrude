{{
include "domain.sbn"  # domain helper functions

func __mssql_getentity(name)
# usage: mssql.getentity(name)
# description: Get a named entity from the domain model with sql server specific attributes eg SqlType
# also expands all interface properties
# example: |-
# mssql.getentity("User")
    # "mssql.getentity(";name;")\n"
    $doment = domain.getentity(name)
    if (!$doment)
        ret
    end
    
    #if (!$doment.properties) 
    #    "No properties defined on type ";name;"\n"
    #end
    
    # Expand all child properties that are entities
    __mssql_expandentityproperties($doment)
        
    # iterate over all interfaces used and get all their properties
    for $iname in $doment?.interfaces  
        __mssql_addinterfaceproperities($doment, $iname)
    end

    for $inhname in $doment?.inherits

        $ientity = __domain_getentity($inhname)
        "domain.getentity(";$inhname;")\n"
        $ientity;"\n"
        __mssql_expandentityproperties($ientity)
        "inherited entity->\n";$ientity;"\n"
    end

    if !$doment.schema
        $doment.schema = "dbo"
    end
    ret $doment
end

func __mssql_addinterfaceproperities(entity, ifacename)
# usage: mssql.addinterfaceproperities(entity, iface)
# description: Add all interface properties to an entity
# example: |-
# mssql.addinterfaceproperities("User","IAudit")
    $iface = __domain_getinterface(ifacename)
    $ipos = $iface?.position ?? 1
    # if position = 0 then insert interface properties into the beginning of the property array
    # otherwise append them 
    if $ipos == 0
        $fidx = 0
    else
        $fidx = entity.properties?.size ?? 0
    end
    # for each interface property in the named interface
    # set the corresponding sql type and add to the cloned object
    for $iprop in __mssql_getinterfaceproperties($iface)
        # Set indicator this is a top level prime interface
        if !$iface.useKey 
            $iprop.isKey = false
            $iprop.isIdentity = false
        end
        $iprop.sqlType = mssql.sqlType($iprop)    
        # Add interface property if it does not already exist
        if !domain.getproperty(entity.properties, $iprop.name)
            entity.properties = entity.properties | array.insert_at $fidx++ $iprop
        end
    end
end


func __mssql_expandentityproperties(entity)
    $props = []
    for $domep in entity.properties
        # If the property type is an entity
        if ($domep.isObject)
            if $domep.isInterface
                __mssql_addinterfaceproperities(entity, $domep) 
            else
                # Get child keys
                $ckeys = domain.getchildkeys($domep.type)
                # "mssql.getentity(";name;")\ndomain.getchildkeys(";$domep.type;")\n";$ckeys;"\n"
                # Add default sql type to keys
                for $key in $ckeys
                    $key.sqlType = mssql.sqlType($key)
                    $props = array.add $props $key
                end
            end
        else
            $domep.sqlType = mssql.sqlType($domep)
            $props = array.add $props $domep
        end        
    end 
    entity.properties = $props;
end


func __mssql_getentities(model)
# usage: mssql.getentities(model)
# description: Get all entities from the domain model with sql server specific attributes eg SqlType
# example: |-
# mssql.getentities(model)
    $ents = []
    for $ent in model.entities
        if !$ent?.virtual
            $ents = array.add $ents __mssql_getentity($ent.name)
        end
    end
    ret $ents
end


func __mssql_getkeys(name)
# usage: mssql.getkeys(name)
# description: Get all keys for a given named entity 
# example: |-
# mssql.getentity("User")
    ret domain.getkeys(name)
end


func __mssql_getchildren(name)
# usage: mssql.getchildren(name)
# description: get all properties that are themselves entities ie child objects/entites for a named entity
# children = mssql.getentitychildren("Address")
    # "mssql.getchildren(";name;")\n"
    $e = domain.getentity(name)
    ret __mssql_getentitychildren($e)
end
    
    
func __mssql_getentitychildren(entity)
# usage: mssql.getentitychildren(entity)
# description: get all properties that are themselves entities ie child objects/entites from a 
# previously loaded entity
# e = mssql.getentity("Address")
# children = domain.__domain_getentitychildren(e)
    $children = domain.getentitychildren(entity)
    if $children   
        for $child in $children
            if $child.entity && !$child.entity.schema
                $child.entity.schema = "dbo"
            end
        end
    end
    ret $children
end


func __msqql_getchildkeys(name)
# usage: mssql.getchildkeys(name)
# description: get all keys for a child entity
# example: |-
# mssql.getchildkeys("Address")
# outputs UserId
    $props = []
    # Get child keys
    $ckeys = domain.getchildkeys(name)
    # Add default sql type to keys
    for $key in $ckeys
        $key.sqlType = mssql.sqlType($key)
        $props = array.add $props $key
    end
    ret $props
end
   

func __mssql_getinterfaceproperties(item)
# usage: mssql.getinterfaceproperties(item)
# description: get all interface properties for an entity
# example: |-
# mssql.getinterfaceproperties("IAudit")
    # "Calling mssql.getinterfaceproperties(";item;")\n"
    $props = [] 
    for $p in item?.properties
        # "Interface property ";p.name;" ";p.type;"sqltype=";db.sqlType(p);"\n"
        # Using null sqlType to determine if this is an object type
        # if this is an object type then just get the child objects keys
        if $p.isObject
            $props = array.add_range $props __domain_getchildkeys($p.type, $p.name)
        else
            $props = array.add $props $p 
        end
    end
    ret $props;
end


func __mssql_sqlType(property)
# usage: mssql.sqltype(property)
# description: determine sql data type from a Property object
# where Property object has the following properties type, length, precision, scale, isIdentity
# example: 1-
# db.sqltype({type: "int32", isIdentity: true})
# INT IDENTITY (1,1) NOT NULL
    if ! property
        ret
    end
    $sdbtype = null
    $len = property.size ?? 50
    case property.type | string.downcase
        when "int", "int32"
            $sdbtype = "INT"
        when "string"
            $sdbtype= "VARCHAR("+$len+")"
        when "decimal","numeric","float"
            $prec = property.precision ?? 18
            $scale = property.scale ?? 6
            $sdbtype = "DECIMAL ("+$prec+", "+$scale+")"
        when "bool","boolean","bit"
            $sdbtype = "BIT"
        when "date"
            $sdbtype = "DATE"
        when "datetime"
            $sdbtype = "DATETIME"
        when "long","int64"
            $sdbtype = "BIGINT"
        when "short","int16"
            $sdbtype = "SMALLINT"
        when "byte" 
            $sdbtype = "TINYINT"   
        when "binary"
            $sdbtype= "VARBINARY("+$len+")"
    end
    if $sdbtype
        if property.isIdentity == "true"
            $sdbtype = $sdbtype + " IDENTITY("+(property.seed ?? 1)+", 1)"
        end
        $sdbtype = $sdbtype + (property.isNullable == "true" ? " NULL" : " NOT NULL")
    end
    ret $sdbtype
end


func __mssql_schemaentity(name)
# usage: mssql.schemaentity(fullname)
# description: Helper function to parse schema.entityname to object with Schema and Entity properties
# example: |-
# mssql.schemaentity("Reference.Test")
# {Schema: "Reference", Entity: "Test"}
    $parts = name | string.split "."
    $ts = {}

    if $parts | array.size == 2
        $ts.schema = $parts[0]
        $ts.entity = $parts[1]
    else
        $ts.schema = "dbo"
        $ts.entity = name
    end
    ret $ts
end


func __mssql_quotename(name)
# usage: mssql.quotename(name)
# description: Helper function to quote a name with square brackets
# example: |-
# mssql.quotename("Test")
# [Test]
    if name | string.starts_with "[" and name | string.ends_with "]"
        ret name
    else
        ret "["+name+"]"
    end
end


func __mssql_quoteentityname(name)
# usage: mssql.quoteentityname(name)
# description: Helper function to quote a schema.entity name with square brackets
# example: |-
# mssql.quoteentityname("Reference.Test")
# [Reference].[Test]
    $ts = __mssql_schemaentity(name)
    ret "["+$ts.schema+"].["+$ts.entity+"]"
end


func __mssql_default(prefix, prop)
    $default = ""
    if (prop.default)
        $default = "CONSTRAINT DF_"+prefix+"_"+prop.name+" DEFAULT ("+prop.default+")"
    end
    ret $default
end


func __mssql_foreignkey(ptable, ftable, pkey, fkey)
# usage: mssql.foreignkey(ptable,ftable, pkey, fkey)
# description: generate SQL server alter table to add a foreign key from 
# primary table ptable to related table ftable using pkey from primary table and fkey from related table
# example: |-
# snames = mssql.foreignkey("User","Address","UserId","UserId")
# snames
# ALTER TABLE [dbo].[User] ADD CONSTRAINT FK_User_Address FOREIGN KEY(UserId) REFERENCES [dbo].[Address](UserId)
    
    $pfields = utils.array2csv( pkey, "name")
    $ffields = utils.array2csv( fkey, "name")
    
    $fkname = "FK_"+string.replace(string.replace(ptable+"_"+ftable,"dbo.",""),".","_")+"_"+string.replace($pfields,",","_")
    $psent = __mssql_schemaentity(ptable)
    # "mssql.foreignkey ";$fkname;" ";ftable;" ";ptable;" ";$fields;"\n"
    $sql = "IF NOT EXISTS( SELECT * FROM INFORMATION_SCHEMA.CONSTRAINT_TABLE_USAGE CT WHERE CT.TABLE_SCHEMA = '"+$psent.schema+"' AND CT.TABLE_NAME = '"+$psent.entity+"' AND CT.CONSTRAINT_NAME = '"+$fkname+"')\n    "
    ret $sql + "ALTER TABLE "+ __mssql_quoteentityname(ptable)+" ADD CONSTRAINT "+$fkname+" FOREIGN KEY("+$pfields+") REFERENCES "+__mssql_quoteentityname(ftable)+"("+$ffields+")\n";
end


func __mssql_primarykey(table, keys)
# usage: mssql.primarykey(table, keys)
# description: generate SQL server primary key constraint for a table
# example: |-
# snames = mssql.primarykey("User","UserId")
    # "mssql.primarykey('";table;"',";keys;")\n"
    $pksql = "CONSTRAINT [PK_"+table+"_"+(keys | array.join "_")+"] PRIMARY KEY CLUSTERED("+(keys | array.join ",")+")"
    ret $pksql
end

func __mssql_getschemanames(model)
# usage: mssql.getschemanames(model)
# description: get all schema names used in the domain model 
# example: |-
# snames = mssql.getschemanames(model)
# outputs UserId
    $schemas = model.entities |
               array.filter @(do(p); ret p.schema != null && string.downcase(p.schema) != "dbo"; end) |
               array.map "schema" 
    ret $schemas
end

textrude.create_library this "mssql"
}}