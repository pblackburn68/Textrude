{{

func __db_sqlType(property)
# usage: db.sqltype (property)
# description: determine sql data type from a Property object
# where Property object has the following properties type, length, precision, scale, isIdentity
# example: 1-
# db.sqltype({type: "int32", isIdentity: true})
# INT IDENTITY (1,1) NOT NULL
    if ! property
        ret
    end
    sdbtype = null
    len = property.length ?? 50
    case property.type
        when "int", "int32"
            sdbtype = "INT"
        when "string"
            sdbtype= "VARCHAR("+len+")"
        when "decimal","numeric","float"
            prec = property.precision ?? 18
            scale = property.scale ?? 6
            sdbtype = "DECIMAL ("+prec+", "+scale+")"
        when "date"
            sdbtype = "DATE"
        when "datetime"
            sdbtype = "DATETIME"
        when "long","int64"
            sdbtype = "BIGINT"
        when "short","int16"
            sdbtype = "TINYINT"
        when "binary"
            sdbtype= "VARBINARY("+len+")"
    end
    if sdbtype
        if property.isIdentity == "true"
            sdbtype = sdbtype + " IDENTITY("+(property.seed ?? 1)+", 1)"
        end
        sdbtype = sdbtype + (property.isNullable == "true" ? " NULL" : " NOT NULL")
    end
    ret sdbtype
end

func __db_schemaentity(name)
# usage: db.schemaentity(fullname)
# description: parse schema.entityname to object with Schema and Entity parts
# example: |-
# db.schemaentity("Reference.Test")
# {Schema: "Reference", Entity: "Test"}
    parts = name | string.split "."
    ts = {}

    if parts | array.size == 2
        ts.schema = parts[0]
        ts.entity = parts[1]
    else
        ts.schema = "dbo"
        ts.entity = name
    end
    ret ts
end

func __db_primarykey(table, keys)
    pksql = "CONSTRAINT [PK_"+table+"_"+(keys | array.join "_")+"] PRIMARY KEY CLUSTERED("+(keys | array.join ",")+")"
    ret pksql
end

func __db_commentblock(text)
# usage: db.commentblock(text)
# description: Display text in a sql comment block
# example: |-
# db.commentblock("File: SomeFile.Sql\nPurpose: Show generated comment\n*** Generated from scriban template ***")
# /*+-----------------------------------------------------------------------------
#   | File: SomeFile.Sql
#   | Purpose: Show generated comment
#   | *** Generated from scriban template ***
#   +-----------------------------------------------------------------------------*/
"/*+-----------------------------------------------------------------------------"
for line in text | string.split "\n"
"\n  | "+line
end
"\n  +-----------------------------------------------------------------------------*/"
end

textrude.create_library this "db"
}}